#
# Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

ifndef _SETUP_GMK
_SETUP_GMK := 1

# If warnings needs to be non-fatal for testing purposes use a command like:
# make JAVAC_WARNINGS="-Xlint:all -Xmaxwarns 10000"
JAVAC_WARNINGS ?= -Xlint:all -Werror

# The BOOT_JAVAC setup uses the boot jdk compiler to compile the tools
# and the interim javac, to be run by the boot jdk.
BOOT_JAVAC_FLAGS := $(BOOT_JDK_SOURCETARGET) \
        -XDignore.symbol.file=true -g \
        $(JAVAC_WARNINGS) -Xlint:-option

# Any java code executed during a JDK build to build other parts of the JDK must be
# executed by the bootstrap JDK (probably with -Xbootclasspath/p: ) and for this
# purpose must be built with -target PREVIOUS for bootstrapping purposes, which
# requires restricting to language level and api of previous JDK.
#
# The generate old bytecode javac setup uses the new compiler to compile for the
# boot jdk to generate tools that need to be run with the boot jdk.
# Thus we force the target bytecode to the previous JDK version.
# Add -Xlint:-options to avoid the warning about not setting -bootclasspath. Since
# it's running on the boot jdk, the default bootclasspath is correct.
GENERATE_OLDBYTECODE_FLAGS := $(BOOT_JDK_SOURCETARGET) \
    -XDignore.symbol.file=true -XDstringConcat=inline  $(JAVAC_WARNINGS) -Xlint:-options

# The generate new bytecode javac setup uses the new compiler to compile for the
# new jdk. This new bytecode might only be possible to run using the new jvm.
JDK_SOURCE_TARGET_FLAGS := -source $(JDK_SOURCE_TARGET_VERSION) \
    -target $(JDK_SOURCE_TARGET_VERSION)

GENERATE_JDKBYTECODE_FLAGS := $(JDK_SOURCE_TARGET_FLAGS) --doclint-format html5 \
        -encoding ascii -XDignore.symbol.file=true $(JAVAC_WARNINGS)

# After the jdk is built, we want to build demos using only the recently
# generated jdk classes and nothing else, no jdk source, etc etc.
# I.e. the rt.jar, but since rt.jar has not yet been generated
# (it will be in "make images") therefore we use classes instead.
GENERATE_USINGJDKBYTECODE_FLAGS := --upgrade-module-path $(JDK_OUTPUTDIR)/modules --system none $(JAVAC_WARNINGS)

# Use boot javac to generate JDK 8 compatible class files explicitly
GENERATE_8_BYTECODE_FLAGS := --release 8 \
        -XDignore.symbol.file=true -g \
        $(JAVAC_WARNINGS)

GENERATE_JFRBYTECODE_FLAGS := $(JAVAC_WARNINGS)

GENERATE_OLDBYTECODE_JVMTI_FLAGS := $(JAVAC_WARNINGS)

MICROBENCHMARK_JAVA_COMPILER_FLAGS := --upgrade-module-path $(JDK_OUTPUTDIR)/modules --system none $(JAVAC_WARNINGS)

endif # _SETUP_GMK
